// GENERATED FILE - DO NOT EDIT
// Generated by Weaver {{ weaver.version }}

use opentelemetry::metrics::{Counter, Histogram, Gauge, Meter, Unit};
use opentelemetry::KeyValue;
use std::sync::Arc;

/// Metrics for async tasks
pub struct TaskMetrics {
    meter: Meter,
{% for group_key, group in schema.groups.items() %}
{% for metric_key, metric in group.metrics.items() %}
    /// {{ metric.description }}
    {{ metric_key|replace('.', '_')|snake_case }}: {{ metric.type|metric_type_to_rust }},
{% endfor %}
{% endfor %}
}

impl TaskMetrics {
    /// Create a new TaskMetrics instance
    pub fn new(meter: Meter) -> Self {
        Self {
            meter: meter.clone(),
{% for group_key, group in schema.groups.items() %}
{% for metric_key, metric in group.metrics.items() %}
            {{ metric_key|replace('.', '_')|snake_case }}: meter
                .{{ metric.type|metric_method }}("{{ metric_key }}")
                .with_description("{{ metric.description }}")
                .with_unit(Unit::new("{{ metric.unit }}"))
                .build(),
{% endfor %}
{% endfor %}
        }
    }
{% for group_key, group in schema.groups.items() %}
{% for metric_key, metric in group.metrics.items() %}

    /// Record {{ metric.description|lower }}
    pub fn record_{{ metric_key|replace('.', '_')|snake_case }}(&self, value: {{ metric.type|value_type }}, attributes: &[KeyValue]) {
        self.{{ metric_key|replace('.', '_')|snake_case }}.{{ metric.type|record_method }}(value, attributes);
    }
{% endfor %}
{% endfor %}
}
