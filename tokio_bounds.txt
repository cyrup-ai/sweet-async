    
    /// Add a child task to this task (async version)
    /// Calculate backoff time for retries
    /// Check if the task has exhausted all retry attempts (async)
    /// Check if the task has timed out (async)
    /// Check if this error type is retriable
    /// Configure auto-scaling with platform-specific implementation
    /// Create a Duration from milliseconds  
    /// Create a Duration from minutes
    /// Create a Duration from seconds
    /// Enable or disable tracing for this task
    /// Get the current retry attempt (async)
    /// Get the current retry count configuration
    /// Get the remaining time before timeout (async)
    /// Get the runtime handle directly
    /// Get the task name if set (async version)
    /// Get the time since task creation
    /// Get the total execution time of the task (async)
    /// Reset the retry counter (async)
    /// Set a fallback value for recovery (async version)
    /// Set a fallback value for recovery (immediate version using Arc<Mutex>)
    /// Set a name for the task
    /// Set a parent task for this task
    /// Set a retry policy for this task
    /// Set the current working directory for the task
    fn add_child_async(&self, child: Box<dyn std::any::Any + Send + Sync>) -> Pin<Box<dyn Future<Output = ()> + Send>>;
    fn calculate_backoff_time(&self, retry_number: u8) -> std::time::Duration;
    fn configure_auto_scaling(&self, max_instances: u32) -> Self::ScalingTask;
    fn current_retry_async(&self) -> Pin<Box<dyn Future<Output = u8> + Send>>;
    fn execution_time_async(&self) -> Pin<Box<dyn Future<Output = Duration> + Send>>;
    fn has_exhausted_retries_async(&self) -> Pin<Box<dyn Future<Output = bool> + Send>>;
    fn has_timed_out_async(&self) -> Pin<Box<dyn Future<Output = bool> + Send>>;
    fn is_retriable_error(&self, error: &AsyncTaskError) -> bool;
    fn milliseconds(self) -> Duration;
    fn minutes(self) -> Duration;
    fn name_async(&self) -> Pin<Box<dyn Future<Output = Option<String>> + Send>>;
    fn remaining_time_async(&self) -> Pin<Box<dyn Future<Output = Option<Duration>> + Send>>;
    fn reset_retry_counter_async(&self) -> Pin<Box<dyn Future<Output = ()> + Send>>;
    fn retry_count(&self) -> u8;
    fn runtime_handle(&self) -> &tokio::runtime::Handle;
    fn seconds(self) -> Duration;
    fn time_since_creation(&self) -> Duration;
    fn with_cwd(self, path: PathBuf) -> Self;
    fn with_fallback_async(self, value: T) -> Pin<Box<dyn Future<Output = Self> + Send>>;
    fn with_fallback(self, value: T) -> Self;
    fn with_name(self, name: String) -> Self;
    fn with_parent(self, parent: Box<dyn std::any::Any + Send + Sync>) -> Self;
    fn with_retry(self, count: u8) -> Self;
    fn with_tracing(self, enabled: bool) -> Self;
    type ScalingTask: AsyncTask<(), AsyncTaskError>;
}
pub trait AsyncTaskContext<T: Clone + Send + 'static, I: TaskId> {
pub trait AsyncTaskRecovery<T: Clone + Send + 'static, I: TaskId> {
pub trait AsyncTaskTiming<T: Clone + Send + 'static, I: TaskId> {
pub trait AsyncTaskTracing<T: Clone + Send + 'static, I: TaskId> {
pub trait AutoScalable {
pub trait DurationExt {
